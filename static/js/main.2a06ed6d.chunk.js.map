{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialState","currentCount","currentTotal","countType","breakTime","sessionTime","timerActive","reducer","state","action","type","newCount","Object","objectSpread","_action$data$split","data","split","_action$data$split2","slicedToArray","incDec","time","value","timeMatches","ConvertMinSec","_ref","minutes","Number","parseInt","seconds","CountDown","_ref2","progressBar","progress","react_default","a","createElement","id","style","height","StartStopButtons","_ref3","startStopTimer","resetTimer","onClick","backgroundColor","SetTimes","_ref4","dispatch","handleIncDec","event","target","className","TimerDisplay","_ref5","playSound","intervalRef","useRef","useEffect","intervalID","setInterval","current","clearInterval","App_CountDown","App_StartStopButtons","App","_useReducer","useReducer","_useReducer2","beepSound","title","src","alt","App_SetTimes","App_TimerDisplay","currentTime","play","pause","Error","ref","preload","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a06ed6d.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useEffect, useRef, useReducer} from 'react'\r\nimport './App.css';\r\n\r\nconst initialState = {\r\n  currentCount: 1500,\r\n  currentTotal: 1500,\r\n  countType: 'session',\r\n  breakTime: 300,\r\n  sessionTime: 1500,\r\n  timerActive: false\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n  switch(action.type) {\r\n    case 'decrement':\r\n      //reduce the count by 1 or change session type if it reaches zero\r\n      if (state.currentCount === 0) {\r\n        const newCount = state.countType==='session' ? state.breakTime : state.sessionTime\r\n        return {\r\n          ...state, \r\n          countType: state.countType==='session' ? 'break' : 'session',\r\n          currentCount: newCount,\r\n          currentTotal: newCount\r\n        }\r\n      } else {\r\n        return {...state, currentCount: state.currentCount - 1}\r\n      }\r\n    case 'startStop':\r\n      //start and stop the timer\r\n      return {...state, timerActive: !state.timerActive}\r\n    case 'changeTime':\r\n      //change the value of the break or session times\r\n      const [type, incDec] = action.data.split(\"-\")\r\n      const time = type === 'session' ? state.sessionTime : state.breakTime\r\n      const value = incDec === 'increment' ? 60 : -60\r\n      \r\n      if ((time > 60 && incDec === 'decrement') || (time < 3600 && incDec==='increment')) {\r\n        const timeMatches = (!state.timerActive && state.countType === type && state.currentCount === time)\r\n        return {\r\n          ...state, \r\n          sessionTime: type === 'session' ? state.sessionTime + value : state.sessionTime,\r\n          breakTime: type === 'break' ? state.breakTime + value : state.breakTime,\r\n          currentCount: timeMatches ? state.currentCount + value : state.currentCount,\r\n          currentTotal: timeMatches ? state.currentTotal + value : state.currentTotal\r\n        }\r\n      } else {\r\n        return state\r\n      }\r\n    case 'reset':\r\n      //reset the value of the timer and session/break times\r\n      return {...initialState}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst ConvertMinSec = ({ time }) => {\r\n  //Convert seconds into mm:ss\r\n  const minutes = Number.parseInt(time / 60)\r\n  const seconds = time % 60\r\n\r\n  let addZeroSec = ''\r\n  let addZeroMin = ''\r\n  addZeroSec = seconds < 10 ? addZeroSec = '0' : addZeroSec = ''\r\n  addZeroMin = minutes < 10 ? '0' : ''\r\n\r\n  return (\r\n    addZeroMin + minutes + ':' + addZeroSec + seconds\r\n  )\r\n}\r\n\r\nconst CountDown = ({ state }) => {\r\n\r\n  const {currentCount, currentTotal, countType} = state\r\n  \r\n  const progressBar = currentCount / currentTotal * 100\r\n  const progress = countType === 'session' ? progressBar + '%' : 100 - progressBar + '%';\r\n\r\n  return (\r\n    <div id=\"sessionTime\">\r\n      <div id=\"progressBox\" style={{height: progress}}></div>\r\n      <h3 id=\"timer-label\">{countType}</h3>\r\n      <h1 id=\"time-left\"><ConvertMinSec time={currentCount} /></h1>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nconst StartStopButtons = ({ state, startStopTimer, resetTimer }) => {\r\n  \r\n  const {timerActive} = state\r\n\r\n  return (\r\n    <div id=\"startStop\">\r\n      <button\r\n        id=\"start_stop\"\r\n        onClick={startStopTimer}\r\n        style={timerActive ? { backgroundColor: '#d4332a' } : {} } >\r\n          {timerActive ? \"Stop\" : \"Start\"}\r\n      </button>\r\n\r\n      <button id=\"reset\" onClick={resetTimer}>Reset</button>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst SetTimes = ({ state, dispatch }) => {\r\n  \r\n  const {sessionTime, breakTime} = state\r\n  \r\n  const handleIncDec = event => {\r\n    const { id } = event.target;\r\n    dispatch({type: 'changeTime', data: id})\r\n  };\r\n\r\n  return (\r\n    <div id='setTimes'>\r\n        \r\n      <div className='setTimesControl'>\r\n        <h2 id='session-label'>Session Time</h2>\r\n        <div className='setTimesButtons'>\r\n            <button id='session-decrement' onClick={handleIncDec}>-</button>\r\n            <h2 id='session-length'>{sessionTime/60}</h2>\r\n            <button id='session-increment' onClick={handleIncDec}>+</button>\r\n        </div>\r\n      </div>\r\n        \r\n      <div className='setTimesControl'>\r\n        <h2 id='break-label'>Break Time</h2>\r\n        <div className='setTimesButtons'>\r\n          <button id='break-decrement' onClick={handleIncDec}>-</button>\r\n          <h2 id='break-length'>{breakTime/60}</h2>\r\n          <button id='break-increment' onClick={handleIncDec}>+</button>\r\n        </div>\r\n      </div>\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst TimerDisplay = ({ playSound, dispatch, state }) => {\r\n\r\n  const intervalRef = useRef()\r\n\r\n  useEffect(() => {\r\n    if (state.timerActive) {\r\n      const intervalID = setInterval(() => dispatch({type: 'decrement'}), 1000)\r\n      intervalRef.current = intervalID //store the intervalID so that it persists between renders\r\n    } else {\r\n      clearInterval(intervalRef.current)\r\n    }\r\n    return () => clearInterval(intervalRef.current)\r\n\r\n  }, [state.timerActive, dispatch])\r\n\r\n\r\n  useEffect(() => {\r\n    if(state.currentCount === 0) {\r\n      playSound('start')\r\n    }\r\n  },[state.currentCount, playSound])\r\n  \r\n\r\n  const startStopTimer = () => {\r\n    dispatch({type: 'startStop'})\r\n  };\r\n\r\n  const resetTimer = () => {\r\n    playSound('stop')\r\n    dispatch({type: 'reset'})\r\n  };\r\n\r\n  return (\r\n    <div id=\"countDownButtons\">\r\n\r\n      <CountDown state={state} />\r\n\r\n      <StartStopButtons\r\n        startStopTimer={startStopTimer}\r\n        resetTimer={resetTimer}\r\n        state={state}>\r\n      </StartStopButtons>\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n  const soundFile = 'https://grimjohncorn.github.io/FCC-Pomodora/beep-sound.mp3';\r\n  const tomatoImg = 'https://grimjohncorn.github.io/FCC-Pomodora/img_tomato.png';\r\n  const beepSound = useRef(null);\r\n\r\n  const playSound = type => {\r\n    switch (type) {\r\n      case 'start':\r\n        beepSound.current.currentTime = 0;\r\n        beepSound.current.play();\r\n        break;\r\n      case 'stop':\r\n        beepSound.current.pause();\r\n        beepSound.current.currentTime = 0;\r\n        break;\r\n      default:\r\n        throw new Error(\"unexpected type\")\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div id=\"mainPage\">\r\n\r\n      <header id=\"heading\" title=\"Pomodoro Clock\">\r\n        <h1>Pomodor</h1>\r\n        <img id=\"img_tomato\" src={tomatoImg} alt=\"tomato logo\"></img>\r\n        <h1>Clock</h1>\r\n      </header>\r\n\r\n      <SetTimes \r\n        dispatch={dispatch}\r\n        state={state}>\r\n      </SetTimes>\r\n\r\n      <TimerDisplay\r\n        playSound={playSound}\r\n        dispatch={dispatch}\r\n        state={state}>\r\n      </TimerDisplay>\r\n\r\n      <audio id='beep' ref={beepSound}>\r\n          <source src={soundFile} type='audio/mpeg' preload='auto' />\r\n      </audio>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}