{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CountDown","_ref","currentTime","countType","progressBar","minutes","Number","parseInt","seconds","progress","addZeroSec","addZeroMin","React","createElement","id","style","height","StartStopButtons","_ref2","timerActive","startStopTimer","resetTimer","onClick","backgroundColor","SetTimes","_ref3","handleIncDec","sessionTime","breakTime","class","TimerDisplay","_ref4","setTimerActive","setCurrentCount","flipSessionType","playSound","currentCount","totalCount","resetDefaults","intervalID","useEffect","setInterval","time","clearInterval","console","log","prevState","App","_useState","useState","_useState2","Object","slicedToArray","setSessionTime","_useState3","_useState4","setBreakTime","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","setCountType","beepSound","useRef","type","current","play","pause","title","src","alt","event","target","currentSession","currentBreak","ref","preload","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b44b7f2.chunk.js","sourcesContent":["import React from 'react';\nimport {useState, useEffect, useRef} from 'react'\nimport './App.css';\n\nconst CountDown = ({ currentTime, countType, progressBar }) => {\n\n  const minutes = Number.parseInt(currentTime / 60);\n  const seconds = currentTime % 60;\n  const progress = countType == 'Session' ? progressBar + '%' : 100 - progressBar + '%';\n\n  let addZeroSec = '';\n  let addZeroMin = '';\n  addZeroSec = seconds < 10 ? addZeroSec = '0' : addZeroSec = '';\n  minutes < 10 ? addZeroMin = '0' : addZeroMin = '';\n\n  return (\n    React.createElement(\"div\", { id: \"sessionTime\" },\n    React.createElement(\"div\", { id: \"progressBox\", style: { height: progress } }),\n    React.createElement(\"h3\", { id: \"timer-label\" }, countType),\n    React.createElement(\"h1\", { id: \"time-left\" }, addZeroMin + minutes + ':' + addZeroSec + seconds)));\n\n\n};\n\nconst StartStopButtons = ({ timerActive, startStopTimer, resetTimer }) => {\n  return (\n    React.createElement(\"div\", { id: \"startStop\" },\n    React.createElement(\"button\", {\n      id: \"start_stop\",\n      onClick: startStopTimer,\n      style: timerActive ? { backgroundColor: '#d4332a' } : {} },\n    timerActive ? \"Stop\" : \"Start\"),\n\n    React.createElement(\"button\", { id: \"reset\", onClick: resetTimer }, \"Reset\")));\n\n\n};\n\nconst SetTimes = ({ handleIncDec, sessionTime, breakTime }) => {\n  return (\n    React.createElement(\"div\", { id: \"setTimes\" },\n\n    React.createElement(\"div\", { class: \"setTimesControl\" },\n    React.createElement(\"h2\", { id: \"session-label\" }, \"Session Time\"),\n    React.createElement(\"div\", { class: \"setTimesButtons\" },\n    React.createElement(\"button\", { id: \"session-decrement\", onClick: handleIncDec }, \"-\"),\n    React.createElement(\"h2\", { id: \"session-length\" }, sessionTime / 60),\n    React.createElement(\"button\", { id: \"session-increment\", onClick: handleIncDec }, \"+\"))),\n\n\n\n    React.createElement(\"div\", { class: \"setTimesControl\" },\n    React.createElement(\"h2\", { id: \"break-label\" }, \"Break Time\"),\n    React.createElement(\"div\", { class: \"setTimesButtons\" },\n    React.createElement(\"button\", { id: \"break-decrement\", onClick: handleIncDec }, \"-\"),\n    React.createElement(\"h2\", { id: \"break-length\" }, breakTime / 60),\n    React.createElement(\"button\", { id: \"break-increment\", onClick: handleIncDec }, \"+\")))));\n\n};\n\n\nconst TimerDisplay = ({\n  timerActive,\n  setTimerActive,\n  flipSessionType,\n  playSound,\n  setCurrentCount,\n  currentCount,\n  totalCount,\n  countType,\n  resetDefaults }) =>\n{\n\n  let intervalID = null;\n\n  useEffect(() => {\n    if (timerActive) {\n      intervalID = setInterval(() => setCurrentCount(time => time - 1), 1000);\n    } else {\n      clearInterval(intervalID);\n    }\n    return () => clearInterval(intervalID);\n\n  }, [timerActive, intervalID]);\n\n  useEffect(() => {\n    if (currentCount === 0) {\n      //playSound('start');\n      //if (countType == 'Session') {\n      //  setCountType('Break');\n      //  setCurrentCount(breakTime);\n      //} else {\n      //  setCountType('Session');\n      //  setCurrentCount(sessionTime);\n      console.log(\"zero1\")\n      }\n    },[currentCount])\n\n\n  const startStopTimer = () => {\n    setTimerActive(prevState => !prevState);\n  };\n\n  const resetTimer = () => {\n    setTimerActive(false);\n    resetDefaults();\n  };\n\n  return (\n    React.createElement(\"div\", { id: \"countDownButtons\" },\n\n    React.createElement(CountDown, {\n      currentTime: currentCount,\n      countType: countType,\n      progressBar: currentCount / totalCount * 100 }),\n\n\n    React.createElement(StartStopButtons, {\n      startStopTimer: startStopTimer,\n      resetTimer: resetTimer,\n      timerActive: timerActive })));\n\n\n\n\n};\n\nconst App = () => {\n\n  const [sessionTime, setSessionTime] = useState(1500);\n  const [breakTime, setBreakTime] = useState(300);\n  const [currentCount, setCurrentCount] = useState(1500);\n  const [timerActive, setTimerActive] = useState(false);\n  const [countType, setCountType] = useState(\"Session\");\n\n  const soundFile = 'https://grimjohncorn.github.io/FCC-Pomodora/beep-sound.mp3';\n  const tomatoImg = 'https://grimjohncorn.github.io/FCC-Pomodora/img_tomato.png';\n  const beepSound = useRef(null);\n\n  const playSound = type => {\n    switch (type) {\n      case 'start':\n        beepSound.current.currentTime = 0;\n        beepSound.current.play();\n        break;\n      case 'stop':\n        beepSound.current.pause();\n        beepSound.current.currentTime = 0;\n        break;}\n\n  };\n\n  const flipSessionType = () => {\n    playSound('start');\n    if (countType == 'Session') {\n      setCountType('Break');\n      setCurrentCount(breakTime);\n    } else {\n      setCountType('Session');\n      setCurrentCount(sessionTime);\n    }\n  };\n\n  const resetDefaults = () => {\n    playSound('stop');\n    setSessionTime(1500);\n    setBreakTime(300);\n    setCurrentCount(1500);\n    setCountType(\"Session\");\n    setTimerActive(false);\n  };\n\n  const handleIncDec = event => {\n    const { id } = event.target;\n    const currentSession = sessionTime;\n    const currentBreak = breakTime;\n\n    switch (id) {\n      case 'session-decrement':\n        if (sessionTime > 60) {\n          setSessionTime(time => time - 60);\n          if (!timerActive && countType == 'Session') {setCurrentCount(currentSession - 60);}\n        }\n        break;\n      case 'session-increment':\n        if (sessionTime < 3600) {\n          setSessionTime(time => time + 60);\n          if (!timerActive && countType == 'Session') {setCurrentCount(currentSession + 60);}\n        }\n        break;\n      case 'break-decrement':\n        if (breakTime > 60) {\n          setBreakTime(time => time - 60);\n          if (!timerActive && countType == 'Break') {setCurrentCount(currentBreak - 60);}\n        }\n        break;\n      case 'break-increment':\n        if (breakTime < 3600) {\n          setBreakTime(time => time + 60);\n          if (!timerActive && countType == 'Break') {setCurrentCount(currentBreak + 60);}\n        }\n        break;\n      default:\n        //Should never occur\n        throw \"Invalid type\";}\n\n  };\n\n  return (\n    React.createElement(\"div\", { id: \"mainPage\" },\n\n    React.createElement(\"header\", { id: \"heading\", title: \"Pomodoro Clock\" },\n    React.createElement(\"h1\", null, \"Pomodor\"),\n    React.createElement(\"img\", { id: \"img_tomato\", src: tomatoImg, alt: \"tomato image\" }),\n    React.createElement(\"h1\", null, \"Clock\")),\n\n\n    React.createElement(SetTimes, {\n      sessionTime: sessionTime,\n      breakTime: breakTime,\n      handleIncDec: handleIncDec }),\n\n\n    React.createElement(TimerDisplay, {\n      currentCount: currentCount,\n      totalCount: countType == 'Session' ? sessionTime : breakTime,\n      setCurrentCount: setCurrentCount,\n      playSound: playSound,\n      countType: countType,\n      timerActive: timerActive,\n      setTimerActive: setTimerActive,\n      resetDefaults: resetDefaults,\n      flipSessionType: flipSessionType }),\n\n\n    React.createElement(\"audio\", { id: \"beep\", ref: beepSound },\n    React.createElement(\"source\", { src: soundFile, type: \"audio/mpeg\", preload: \"auto\" }))));\n\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}